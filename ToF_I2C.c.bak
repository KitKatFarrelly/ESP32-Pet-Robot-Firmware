#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "esp_log.h"
#include "driver/i2c.h"
#include "driver/gpio.h"

#include "ToF_I2C.h"
#include "tof_bin_image.h"

//I2C definitions

#define I2C_MASTER_SCL_IO           GPIO_NUM_16      /*!< GPIO number used for I2C master clock */
#define I2C_MASTER_SDA_IO           GPIO_NUM_17      /*!< GPIO number used for I2C master data  */
#define I2C_MASTER_NUM              0                          /*!< I2C master i2c port number, the number of i2c peripheral interfaces available will depend on the chip */
#define I2C_MASTER_FREQ_HZ          400000                     /*!< I2C master clock frequency */
#define I2C_MASTER_TX_BUF_DISABLE   0                          /*!< I2C master doesn't need buffer */
#define I2C_MASTER_RX_BUF_DISABLE   0                          /*!< I2C master doesn't need buffer */
#define I2C_MASTER_TIMEOUT_MS       1000

#define TOF_SENSOR_ADDR                 0x41        /*!< Slave address of the TOF sensor */

#define TOF_EN   GPIO_NUM_18

//Defines

#define FW_HEADER_LEN 3

static const char *TAG = "TOF LOG";

static uint8_t TOF_FIRMWARE_CHECK(void);
static uint8_t TOF_FIRMWARE_DOWNLOAD(void);
static uint8_t TOF_DOWNLOAD_CMD(unsigned long firmware_idx, uint8_t firmware_length);
static uint8_t TOF_WAIT_UNTIL_READY(void);


void TOF_INIT(void)
{
	//I2C SETUP
	
	gpio_set_level(TOF_EN, 1);
	
	int i2c_master_port = I2C_MASTER_NUM;

    i2c_config_t i2c_conf = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = I2C_MASTER_SDA_IO,
        .scl_io_num = I2C_MASTER_SCL_IO,
        .sda_pullup_en = 0,
        .scl_pullup_en = 0,
        .master.clk_speed = I2C_MASTER_FREQ_HZ,
    };

    i2c_param_config(i2c_master_port, &i2c_conf);

    ESP_ERROR_CHECK(i2c_driver_install(i2c_master_port, i2c_conf.mode, I2C_MASTER_RX_BUF_DISABLE, I2C_MASTER_TX_BUF_DISABLE, 0));

	//TOF ENABLE

	//zero-initialize the config structure.
    gpio_config_t io_conf = {};
	//interrupt of rising edge
    io_conf.intr_type = GPIO_INTR_DISABLE;
    //bit mask of the battery stat
    io_conf.pin_bit_mask = (1ULL<<TOF_EN);
    //set as input mode
    io_conf.mode = GPIO_MODE_OUTPUT;
    //enable pull-up mode
    io_conf.pull_up_en = 0;
    gpio_config(&io_conf);
	
	TOF_FIRMWARE_CHECK();
}

esp_err_t TOF_READ(uint8_t* TOF_OUT, uint8_t dat_size)
{
	return i2c_master_read_from_device(I2C_MASTER_NUM, TOF_SENSOR_ADDR, TOF_OUT, dat_size, I2C_MASTER_TIMEOUT_MS / portTICK_PERIOD_MS);
}

esp_err_t TOF_READ_WRITE(uint8_t* TOF_OUT, uint8_t out_dat_size, uint8_t* TOF_IN, uint8_t in_dat_size)
{
	return i2c_master_write_read_device(I2C_MASTER_NUM, TOF_SENSOR_ADDR, TOF_IN, in_dat_size, TOF_OUT, out_dat_size, I2C_MASTER_TIMEOUT_MS / portTICK_PERIOD_MS);
}

esp_err_t TOF_WRITE(uint8_t* TOF_IN, uint8_t dat_size)
{
	return i2c_master_write_to_device(I2C_MASTER_NUM, TOF_SENSOR_ADDR, TOF_IN, dat_size, I2C_MASTER_TIMEOUT_MS / portTICK_PERIOD_MS);
}

static uint8_t TOF_FIRMWARE_CHECK(void)
{
	//Check that firmware is correct version. Otherwise download new bootloader
	uint8_t tof_reg_addr = 0xE0;
	uint8_t tof_data = 0;
	while((tof_data & 0xCF) != 0x41) // wait until it is b01xx_0001
	{
		if(TOF_READ_WRITE(&tof_data, 1, &tof_reg_addr, 1) == ESP_OK)
		{
			ESP_LOGI(TAG, "TOF enable return is %x", tof_data);
		}
		else
		{
			return 0;
		}
	}
	tof_reg_addr = 0x00;
	if(TOF_READ_WRITE(&tof_data, 1, &tof_reg_addr, 1) == ESP_OK)
	{
		ESP_LOGI(TAG, "TOF appid is %x", tof_data);
	}
	else
	{
		return 0;
	}
	
	if(tof_data == 0x03)
	{
		ESP_LOGI(TAG, "TOF app is running.");
	}
	else if(tof_data == 0x80)
	{
		ESP_LOGI(TAG, "Bootloader is running, installing firmware.");
		TOF_FIRMWARE_DOWNLOAD();
	}
	else
	{
		ESP_LOGE(TAG, "Something bad happened while checking app id.");
		return 0;
	}
	
	return 1;
}

static uint8_t TOF_FIRMWARE_DOWNLOAD(void)
{
	//TODO:
	//1. Put TMF8828 into bootloader mode
	//2. Go to correct location in memory
	//3. Loop writing Firmware into TMF8828 via i2c_conf
	//4. Restart TMF8288 into application mode
	
	// Step 1:
	
	TOF_WAIT_UNTIL_READY();
	
	// Step 2:
	
	TOF_WAIT_UNTIL_READY();
	
	// Step 3:
	
	unsigned long firmware_idx = 0;
	uint8_t firmware_length = 64;
	
	while(firmware_idx < TOF_BIN_IMAGE_LENGTH)
	{
		unsigned long data_remaining = TOF_BIN_IMAGE_LENGTH - firmware_idx;
		if(data_remaining)
		TOF_FIRMWARE_CMD(firmware_idx, firmware_length);
		firmware_idx += firmware_length;
		
		TOF_WAIT_UNTIL_READY();
	}
	return 1;
}

static uint8_t TOF_DOWNLOAD_CMD(unsigned long firmware_idx, uint8_t firmware_length)
{
	uint8_t packet_len = (firmware_length + FW_HEADER_LEN);
	
	uint8_t *cmd_and_data = malloc(packet_len * sizeof(uint8_t));
	
	*cmd_and_data = 0x08;
	
	uint8_t checksum += 0x08;
	
	*(cmd_and_data + 1) = 0x41;
	
	uint8_t checksum += 0x41;
	
	*(cmd_and_data + 2) = firmware_length;
	
	checksum += firmware_length;
	
	unsigned long current_fw_idx = firmware_idx;
	
	ESP_LOGI(TAG, "Creating Data Packet. Packet length is %u. Current FW index is %x.", packet_len, firmware_idx);
	
	for(int i = 3; i < packet_len - 1; i++)
	{
		*(cmd_and_data + i) = tof_bin_image[current_fw_idx];
		checksum += tof_bin_image[current_fw_idx];
		current_fw_idx++;
	}
	
	ESP_LOGI(TAG, "Checksum is %x.", ~checksum);
	
	*(cmd_and_data + i) = ~checksum;
	
	esp_err_t i2c_write_err = TOF_WRITE(cmd_and_data, packet_len);
	free(cmd_and_data);
	
	if(i2c_write_err == ESP_OK)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

static uint8_t TOF_WAIT_UNTIL_READY(void)
{
	
}